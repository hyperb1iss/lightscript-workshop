---
description: `This rule governs the LightScript Workshop project structure and architecture. Apply it when working with project files, creating new effects, modifying build processes, or planning architectural changes. The rule ensures consistency in file organization, component design, and build system. It's essential for maintaining the clean separation between the core framework (core/), development engine (dev/), and effect implementations (effects/). Following this structure is crucial for proper effect discovery, rendering, and compatibility with SignalRGB.`
globs: 
alwaysApply: false
---

# LightScript Workshop Project Structure

## Critical Rules

- Project is organized into clear functional directories
- Core framework code belongs in `core/` with focused single-purpose modules
  - `core/effects/` - Base effect classes
  - `core/controls/` - Decorator implementation for controls
  - `core/utils/` - Shared utility functions
- Development engine resides in `dev/` directory
- Effects must be organized as `effects/{effect-id}/` containing at minimum:
  - `main.ts` - Effect implementation with decorator-based controls
  - For WebGL effects: `fragment.glsl` for shader code
  - Additional assets (additional shaders, images, etc.) within this directory
- New effects MUST be registered in the effects registry to be discoverable
- The SignalRGB build process uses Vite plugins - avoid modifying without understanding implications
- Effects must extend either `CanvasEffect<T>` or `WebGLEffect<T>` base classes
- Control definitions use decorators: `@NumberControl`, `@BooleanControl`, `@ComboboxControl`, etc.
- Metadata is defined using the `@Effect` decorator on the effect class
- Include appropriate JSDoc comments for public APIs and interfaces
- Unit tests should be placed in `tests` directory matching the source structure
- Effect metadata must include: name, description, and author

## Examples

<example>
// effects/new-effect/main.ts
import { CanvasEffect } from "../../core/effects/canvas-effect";
import { 
  Effect, 
  NumberControl, 
  ComboboxControl 
} from "../../core/controls/decorators";
import { initializeEffect } from "../../core";

// Define control interface
interface NewEffectControls {
  intensity: number;
  style: string;
}

@Effect({
  name: "New Effect",
  description: "A beautiful new effect",
  author: "Author Name"
})
export class NewEffect extends CanvasEffect<NewEffectControls> {
  @NumberControl({
    label: "Intensity",
    min: 0,
    max: 100,
    default: 50,
    tooltip: "Controls the effect intensity"
  })
  intensity!: number;
  
  @ComboboxControl({
    label: "Style",
    values: ["Smooth", "Sharp", "Wavy"],
    default: "Smooth",
    tooltip: "Visual style of the effect"
  })
  style!: string;
  
  constructor() {
    super({
      id: "new-effect",
      name: "New Effect",
      debug: true
    });
  }
  
  // Implementation methods...
  
  protected initializeControls(): void {
    window.intensity = 50;
    window.style = "Smooth";
  }
  
  protected getControlValues(): NewEffectControls {
    return {
      intensity: window.intensity ?? 50,
      style: window.style ?? "Smooth"
    };
  }
  
  // Additional required methods...
}

// Create and initialize the effect
const effect = new NewEffect();
initializeEffect(() => effect.initialize());

export default effect;

// Effect registration (in the registry file)
// This would be in a separate registry file
const effectRegistry = [
  // Existing effects...
  {
    id: "new-effect",
    name: "New Effect",
    description: "A beautiful new effect",
    author: "Author Name",
    entry: "./effects/new-effect/main.ts",
  },
];
</example>

<example type="invalid">
// Placing effect files in wrong directory structure
// src/my-effect/main.js

// Missing decorator pattern
class NewEffect {
  // Not extending proper base class and no decorator
  constructor() {
    this.speed = 1.0;
  }
  
  // HTML template use instead of decorators
  // <template.html with control meta tags>
  
  render() {
    // Direct canvas manipulation without using framework
  }
}

// No proper exports
// Incorrect file structure
// Not registering in the effect registry
</example> 