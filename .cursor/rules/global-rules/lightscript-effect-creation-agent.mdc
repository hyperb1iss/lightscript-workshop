---
description: `This rule governs the creation of new effects in LightScript Workshop. Apply it when users request a new effect, want to convert a Shadertoy shader, or need guidance on implementing specific visual styles. This rule ensures consistent effect structure, proper implementation of lifecycle methods, and compatibility with the SignalRGB platform. It provides clear patterns for both Canvas 2D and WebGL-based effects, including setup, controls definition, and rendering techniques. Following this rule ensures new effects leverage the framework correctly and maintain consistent quality.`
globs: 
alwaysApply: false
---

# LightScript Effect Creation Guidelines

## Critical Rules

- New effects must follow one of two base patterns: `CanvasEffect<T>` (Canvas 2D) or `WebGLEffect<T>` (WebGL/Three.js)
- Each effect requires at minimum two files:
  - `main.ts` - Implementation with decorated effect class and control properties
  - For WebGL effects: shader files like `fragment.glsl`
- All controls must be defined using decorator syntax: `@NumberControl`, `@ComboboxControl`, etc.
- Use the `@Effect` decorator to define effect metadata (name, description, author)
- WebGL effects must include shader code as separate `.glsl` files and import them
- Shadertoy conversions must adapt uniforms to match the LightScript naming convention
- Control interfaces must define all parameters with proper types
- Implement all required abstract methods from the base class
- Canvas effects must implement the `draw(time, deltaTime)` method
- WebGL effects must implement `createUniforms()` and `updateUniforms()` methods
- New effects must be registered in the effects registry to be discoverable
- Follow the pattern: initialize → loadResources → render → update → cleanup
- Always use strong typing with proper generics: `CanvasEffect<MyControlsInterface>`
- Control values must be normalized using helper functions
- Effect implementation must handle window resizing and device pixel ratio
- Use provided debug utilities with consistent log levels and namespaces
- Clean up all resources in the `stop()` method to prevent memory leaks
- Include comprehensive JSDoc comments for public methods

## Canvas Effect Creation Workflow

1. Create directory structure: `effects/{effect-id}/`
2. Define control interface
3. Implement effect class extending `CanvasEffect<T>` with appropriate decorators
4. Implement `draw()` method with Canvas 2D rendering logic
5. Register the effect in the effects registry

## WebGL Effect Creation Workflow

1. Create directory structure: `effects/{effect-id}/`
2. Define fragment shader (and optionally vertex shader) in .glsl files
3. Define control interface
4. Implement effect class extending `WebGLEffect<T>` with appropriate decorators
5. Implement shader uniform creation and updating
6. Register the effect in the effects registry

## Examples

<example>
// Canvas Effect Example (basic structure)

// effects/my-canvas-effect/main.ts
import { CanvasEffect } from "../../core/effects/canvas-effect";
import { 
  Effect, 
  NumberControl, 
  BooleanControl 
} from "../../core/controls/decorators";
import { normalizeSpeed } from "../../core/controls/helpers";
import { initializeEffect } from "../../core";

// Define control interface
interface MyEffectControls {
  speed: number;
  particleCount: number;
  useGlow: boolean;
  colorIntensity: number;
}

@Effect({
  name: "My Canvas Effect",
  description: "A beautiful canvas-based effect",
  author: "YourName"
})
export class MyCanvasEffect extends CanvasEffect<MyEffectControls> {
  // Define controls with decorators
  @NumberControl({
    label: "Animation Speed",
    min: 1,
    max: 10,
    default: 5,
    tooltip: "Controls how fast the animation runs"
  })
  speed!: number;
  
  @NumberControl({
    label: "Particle Count",
    min: 10,
    max: 500,
    default: 100,
    tooltip: "Number of particles in the effect"
  })
  particleCount!: number;
  
  @BooleanControl({
    label: "Enable Glow",
    default: true,
    tooltip: "Enables glowing effect on particles"
  })
  useGlow!: boolean;
  
  @NumberControl({
    label: "Color Intensity",
    min: 10,
    max: 200,
    default: 100,
    tooltip: "Controls color brightness"
  })
  colorIntensity!: number;
  
  // Effect properties
  private particles = [];
  private lastTime = 0;
  
  constructor() {
    super({
      id: "my-canvas-effect",
      name: "My Canvas Effect",
      backgroundColor: "black"
    });
  }
  
  protected initializeControls(): void {
    // Set default values (now matches decorator defaults)
    window.speed = 5;
    window.particleCount = 100;
    window.useGlow = true;
    window.colorIntensity = 100;
  }
  
  protected getControlValues(): MyEffectControls {
    return {
      speed: normalizeSpeed(window.speed ?? 5),
      particleCount: window.particleCount ?? 100,
      useGlow: Boolean(window.useGlow ?? true),
      colorIntensity: window.colorIntensity ?? 100
    };
  }
  
  protected applyControls(controls: MyEffectControls): void {
    // Apply control values to effect state
    // Create/update particles etc.
  }
  
  protected draw(time: number, deltaTime: number): void {
    if (!this.ctx || !this.canvas) return;
    
    // Clear canvas
    this.clearCanvas();
    
    // Draw effect using Canvas 2D API
    this.ctx.fillStyle = "white";
    // Drawing implementation...
  }
}

// Create and initialize the effect
const effect = new MyCanvasEffect();
initializeEffect(() => effect.initialize());

export default effect;
</example>

<example>
// WebGL/Shadertoy Conversion Example

// effects/shadertoy-effect/fragment.glsl
// Modified Shadertoy shader with LightScript uniforms
uniform float iTime;
uniform vec2 iResolution;
uniform float iSpeed;
uniform float iColorIntensity;
uniform int iColorMode;
uniform float iPattern;

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  // Shadertoy shader code adapted to use LightScript uniforms
  vec2 uv = fragCoord/iResolution.xy;
  
  // Apply effect parameters from controls
  float time = iTime * iSpeed;
  float pattern = iPattern;
  
  // Your shader calculation here
  vec3 color = vec3(0.5 + 0.5 * sin(time + uv.xyx + vec3(0,2,4)));
  
  // Apply color intensity
  color *= iColorIntensity;
  
  // Apply different color modes
  if (iColorMode == 1) {
    // Different color calculation
  }
  
  fragColor = vec4(color, 1.0);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}

// effects/shadertoy-effect/main.ts
import { WebGLEffect } from "../../core/effects/webgl-effect";
import {
  Effect,
  NumberControl,
  ComboboxControl
} from "../../core/controls/decorators";
import { normalizeSpeed } from "../../core/controls/helpers";
import { initializeEffect } from "../../core";
import * as THREE from "three";
import fragmentShader from "./fragment.glsl";

// Define control interface
interface ShadertoyEffectControls {
  speed: number;
  colorIntensity: number;
  colorMode: string | number;
  pattern: number;
  colorSaturation: number;
}

@Effect({
  name: "Shadertoy Effect",
  description: "Converted from Shadertoy",
  author: "YourName"
})
export class ShadertoyEffect extends WebGLEffect<ShadertoyEffectControls> {
  private readonly colorModes = ["Standard", "Neon", "Monochrome"];
  
  @NumberControl({
    label: "Animation Speed",
    min: 1,
    max: 10,
    default: 5,
    tooltip: "Controls animation speed"
  })
  speed!: number;
  
  @NumberControl({
    label: "Color Intensity",
    min: 10,
    max: 200,
    default: 100,
    tooltip: "Brightness of colors"
  })
  colorIntensity!: number;
  
  @ComboboxControl({
    label: "Color Mode",
    values: ["Standard", "Neon", "Monochrome"],
    default: "Standard",
    tooltip: "Changes the color scheme"
  })
  colorMode!: string;
  
  @NumberControl({
    label: "Pattern Density",
    min: 1,
    max: 10,
    default: 5,
    tooltip: "Controls pattern density"
  })
  pattern!: number;
  
  @NumberControl({
    label: "Color Saturation",
    min: 0,
    max: 200,
    default: 100,
    tooltip: "Controls color saturation"
  })
  colorSaturation!: number;
  
  constructor() {
    super({
      id: "shadertoy-effect",
      name: "Shadertoy Effect",
      fragmentShader
    });
  }
  
  protected initializeControls(): void {
    window.speed = 5;
    window.colorIntensity = 100;
    window.colorMode = "Standard";
    window.pattern = 5;
    window.colorSaturation = 100;
  }
  
  protected getControlValues(): ShadertoyEffectControls {
    // Handle colorMode conversion
    const rawColorMode = window.colorMode ?? "Standard";
    let colorMode: number | string = rawColorMode;
    
    if (typeof colorMode === "string") {
      const modeIndex = this.colorModes.indexOf(colorMode);
      colorMode = modeIndex === -1 ? 0 : modeIndex;
    }
    
    return {
      speed: normalizeSpeed(window.speed ?? 5),
      colorIntensity: (window.colorIntensity ?? 100) / 100,
      colorMode,
      pattern: window.pattern ?? 5,
      colorSaturation: window.colorSaturation ?? 100
    };
  }
  
  protected createUniforms(): Record<string, THREE.IUniform> {
    return {
      iSpeed: { value: 1.0 },
      iColorIntensity: { value: 1.0 },
      iColorMode: { value: 0 },
      iPattern: { value: 5.0 }
    };
  }
  
  protected updateUniforms(controls: ShadertoyEffectControls): void {
    if (!this.material) return;
    
    this.material.uniforms.iSpeed.value = controls.speed;
    this.material.uniforms.iColorIntensity.value = controls.colorIntensity;
    this.material.uniforms.iColorMode.value = controls.colorMode;
    this.material.uniforms.iPattern.value = controls.pattern;
  }
}

// Create and export effect
const effect = new ShadertoyEffect();
initializeEffect(() => effect.initialize());
export default effect;
</example>

<example type="invalid">
// Invalid effect implementation

// Missing decorators for controls
class MyEffect extends WebGLEffect<MyControls> {
  // Controls defined without decorators
  private speed = 5;
  private colorMode = "Standard";
  
  // Missing @Effect decorator
  constructor() {
    super({
      id: "my-effect",
      name: "My Effect",
      fragmentShader
    });
  }
  
  // Trying to directly manipulate DOM instead of using framework
  protected initializeRenderer(): Promise<void> {
    const canvas = document.getElementById("canvas");
    const gl = canvas.getContext("webgl");
    // Direct WebGL calls instead of using Three.js
  }
  
  // Missing required methods
  // No createUniforms() or updateUniforms() implementation
  
  // Missing proper control updates
  protected updateParameters(controls: MyControls): void {
    // Directly setting uniform values without checking if material exists
    this.material.uniforms.iSpeed.value = controls.speed;
  }
  
  // Missing proper cleanup
}

// Not providing proper initialization
new MyEffect().initialize();
</example>
</rewritten_file>