---
description: `This rule provides guidance on common effect patterns and creative ideas for LightScript Workshop. Apply it when users request specific visual styles, creative suggestions, or need inspiration for new effects. The rule outlines established visual patterns, performance considerations, and creative approaches for both Canvas and WebGL effects. It's particularly useful when designing new effects from scratch or when looking to implement a specific visual style. Following these patterns ensures visually compelling and technically sound lighting effects.`
globs: 
alwaysApply: false
---

# LightScript Effect Patterns and Styles

## Critical Rules

- Select the appropriate rendering technology based on the effect requirements:
  - **Canvas 2D** for particle systems, dynamic drawing, or complex object interactions
  - **WebGL/Three.js** for shader-based effects, 3D rendering, or high-performance pixel manipulation
- Start with a clear visual concept before implementing technical details
- Effects should look good at different resolutions (320×200 to 800×600)
- Prioritize bright, saturated colors that work well with RGB lighting devices
- Design effects with customization in mind - add controls for key visual parameters
- Include standard controls: speed, colorIntensity, colorSaturation at minimum
- Parameterize hardcoded values for maximum user customization
- Effects should perform well on low-end hardware (target 60+ FPS)
- Create smooth transitions and animations, avoid jarring visual changes
- Test effects with simulated LED layouts (grids, circles, strips)
- Consider power usage - avoid effects that light all LEDs at full brightness constantly
- Optimize rendering code and shader complexity for smooth performance

## Common Canvas Effect Patterns

**Particle Systems**
- Create `Particle` class with position, velocity, color, size properties
- Use additive blending for glowing effects: `ctx.globalCompositeOperation = "lighter"`
- Apply semi-transparent backgrounds for motion trails
- Implement configurable particle behaviors (bounce vs. wrap, flow patterns)

**Color Wave Effects**
- Use sinusoidal functions for smooth wave movements
- Map wave position to a color gradient or palettes
- Offer different color modes/schemes
- Use adjustable amplitude, frequency, and phase

**Audio Responsive (Advanced)**
- Transform audio data into visual representations using Canvas
- Implement beat detection for reactive visuals
- Use FFT analysis for frequency visualization 
- Scale visual elements based on audio intensity

## Common WebGL Effect Patterns

**Raymarched Effects**
- Use distance functions for shape definition
- Implement camera movement for 3D effects
- Create procedural textures with noise functions
- Optimize marching steps for performance

**Procedural Patterns**
- Use combinations of sine/cosine waves for organic motion
- Implement cellular automata and reaction-diffusion
- Create kaleidoscopic effects with symmetry functions
- Leverage fractal formulas (Mandelbrot, Julia sets)

**Color Processing**
- HSL/HSV color space manipulation for intuitive controls
- Implement custom color palettes with smooth interpolation
- Create dynamic color shifting with time-based functions
- Offer gradient mapping for visual variety

## Examples

<example>
// Particle System Pattern Example (Canvas)

// In src/effects/neon-particles/particle.ts
export class Particle {
  x: number;
  y: number;
  size: number;
  speedX: number;
  speedY: number;
  color: string;
  alpha: number;
  
  constructor(canvasWidth: number, canvasHeight: number) {
    this.x = Math.random() * canvasWidth;
    this.y = Math.random() * canvasHeight;
    this.size = Math.random() * 5 + 2;
    this.speedX = (Math.random() - 0.5) * 2;
    this.speedY = (Math.random() - 0.5) * 2;
    this.color = this.getRandomColor();
    this.alpha = Math.random() * 0.5 + 0.5;
  }
  
  update(width: number, height: number, bounce: boolean): void {
    this.x += this.speedX;
    this.y += this.speedY;
    
    // Handle edge collisions
    if (bounce) {
      if (this.x < 0 || this.x > width) this.speedX *= -1;
      if (this.y < 0 || this.y > height) this.speedY *= -1;
    } else {
      // Wrap around
      if (this.x < 0) this.x = width;
      if (this.x > width) this.x = 0;
      if (this.y < 0) this.y = height;
      if (this.y > height) this.y = 0;
    }
  }
  
  getRandomColor(): string {
    const colors = [
      '#ff00ff', // Pink
      '#00ffff', // Cyan
      '#ffff00', // Yellow
      '#ff0088', // Hot pink
      '#00ff88'  // Mint
    ];
    return colors[Math.floor(Math.random() * colors.length)];
  }
}

// In drawing code:
protected draw(time: number, deltaTime: number): void {
  if (!this.ctx || !this.canvas) return;
  
  // Semi-transparent background for motion trails
  this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
  
  // Additive blending for glow effect
  this.ctx.globalCompositeOperation = 'lighter';
  
  // Update and draw particles
  for (const particle of this.particles) {
    particle.update(this.canvas.width, this.canvas.height, this.controls.bounce);
    
    // Draw glow
    const gradient = this.ctx.createRadialGradient(
      particle.x, particle.y, 0,
      particle.x, particle.y, particle.size * 2
    );
    gradient.addColorStop(0, particle.color);
    gradient.addColorStop(1, 'rgba(0,0,0,0)');
    
    this.ctx.beginPath();
    this.ctx.fillStyle = gradient;
    this.ctx.arc(particle.x, particle.y, particle.size * 2, 0, Math.PI * 2);
    this.ctx.fill();
    
    // Draw particle core
    this.ctx.beginPath();
    this.ctx.fillStyle = 'rgba(255,255,255,' + particle.alpha + ')';
    this.ctx.arc(particle.x, particle.y, particle.size / 2, 0, Math.PI * 2);
    this.ctx.fill();
  }
  
  // Reset composite operation
  this.ctx.globalCompositeOperation = 'source-over';
}
</example>

<example>
// Procedural WebGL Pattern Example

// Fragment shader for a classic plasma effect with controls
uniform float iTime;
uniform vec2 iResolution;
uniform float iSpeed;
uniform int iColorMode;
uniform float iScale;
uniform float iColorSpeed;

// Procedural color functions
vec3 getRainbowColor(float t) {
  return 0.5 + 0.5 * cos(6.28318 * (t + vec3(0.0, 0.33, 0.67)));
}

vec3 getNeonColor(float t) {
  if (t < 0.33) {
    return mix(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 1.0), t * 3.0);
  } else if (t < 0.66) {
    return mix(vec3(0.0, 1.0, 1.0), vec3(1.0, 1.0, 0.0), (t - 0.33) * 3.0);
  } else {
    return mix(vec3(1.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0), (t - 0.66) * 3.0);
  }
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  vec2 uv = fragCoord / iResolution.xy;
  vec2 p = (uv - 0.5) * iScale;
  
  // Adjustable speed
  float time = iTime * iSpeed;
  
  // Create plasma pattern
  float plasma = 
    sin(p.x * 10.0 + time) +
    sin(p.y * 10.0 + time) +
    sin(sqrt(p.x * p.x + p.y * p.y) * 20.0) +
    sin(sqrt(p.x * p.x + p.y * p.y) * 10.0 + time);
  
  plasma = plasma * 0.25;
  
  // Apply color based on selected mode
  vec3 col;
  float colorPosition = plasma + time * iColorSpeed * 0.1;
  
  if (iColorMode == 0) {
    col = getRainbowColor(colorPosition);
  } else if (iColorMode == 1) {
    col = getNeonColor(colorPosition);
  } else {
    // Monochrome
    col = vec3(plasma + 0.5);
  }
  
  fragColor = vec4(col, 1.0);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}
</example>

<example type="invalid">
// Low-Performance Canvas Effect (Avoid These Patterns)

// Bad pattern: Creating new objects every frame
function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  
  for (let i = 0; i < 1000; i++) {
    // Creating new objects every frame is inefficient
    const particle = new Particle();
    
    // Inefficient rendering approach
    ctx.save();
    ctx.beginPath();
    ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
    ctx.fillStyle = particle.getColor(); // Computing color every time
    ctx.fill();
    ctx.restore();
  }
  
  // Missing frame rate limiting
  requestAnimationFrame(draw);
}

// Inefficient WebGL Shader (Too Complex)
void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  // Too many nested loops and complex calculations
  vec3 color = vec3(0.0);
  
  for (int i = 0; i < 100; i++) {  // Excessive iteration
    for (int j = 0; j < 100; j++) {  // Nested loop - very slow
      vec2 pos = vec2(float(i), float(j)) / 100.0;
      color += someComplexFunction(pos);  // Expensive calculation
    }
  }
  
  // Excessive branching
  if (color.r > 0.5) {
    if (color.g > 0.3) {
      if (color.b > 0.7) {
        color *= 2.0;
      } else {
        color *= 1.5;
      }
    } else {
      color *= 0.5;
    }
  }
  
  fragColor = vec4(color, 1.0);
}
</example> 